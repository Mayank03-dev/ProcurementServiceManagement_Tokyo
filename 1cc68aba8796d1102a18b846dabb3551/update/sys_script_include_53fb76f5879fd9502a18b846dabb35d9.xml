<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>sn_psm_sap_int.PsmSapUtils</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>PsmSapUtils</name>
        <script><![CDATA[var PsmSapUtils = Class.create();
PsmSapUtils.prototype = {
    initialize: function() {},
    getCurrencyFields: function(tablename, sysId) {
        var rec = new GlideRecord(tablename);
        rec.get(sysId);
        var fields = rec.getElements();
        var currencyFields = {};
        fields.forEach(function(element) {
            var type = element.getED().getInternalType();
            if (type == "currency2") {
                var sys_id = element.toString();
                if (sys_id) {
                    var obj = {};
                    var grec = element.getRefRecord();
                    obj['amount'] = grec.reference_amount.toString();
                    obj['code'] = grec.reference_currency.toString();
                    currencyFields[element.getName()] = obj;
                }
            }
        });
        return currencyFields;
    },
    checkMandatoryFields: function(mandatoryFieldsList) {
        var emptyMandatoryFieldsList = [];
        Object.keys(mandatoryFieldsList).forEach(function(key) {
            if (gs.nil(mandatoryFieldsList[key])) {
                emptyMandatoryFieldsList.push(key);
            }
        });
        emptyMandatoryFieldsList = emptyMandatoryFieldsList.join(", ");
        return emptyMandatoryFieldsList;
    },
    convertDateToSAPFormat: function(dte) {
        dte = dte.split('-');
        var sapDate = '';
        for (k = 0; k < dte.length; k++) {
            sapDate = sapDate + dte[k].toString();
        }
        return sapDate.toString();
    },

    callSubflowPO: function() {
        gs.addInfoMessage("Test Value: ");
        var sysIdList = this.getParameter('sysparm_sysid_list').toString();
        var tblName = this.getParameter('sysparm_table_name');

        try {
            gs.info("Test Value: " + sysIdList);
            var inputs = {};
            inputs['po_sysid'] = sysIdList; // String 
            inputs['table_name'] = tblName; // String 
            sn_fd.FlowAPI.getRunner().subflow('sn_psm_sap_int.submit_pos_test_test').inBackground().withInputs(inputs).run();
            return "Ran Successfully";
        } catch (ex) {
            gs.info("Test Value: " + sysIdList);
            var message = ex.getMessage();
            gs.error(message);
        }
    },

    dividePOLinesBasedOnCostCenter: function(polRec, polObj) {
        var quantity = polObj.QUANTITY;
        var polines = [];
        var grec = new GlideRecord('sn_shop_cost_allocation');
        grec.addQuery('order_line.sys_id', polRec.sys_id.toString());
        grec.query();
        if (grec.hasNext()) {
            while (grec.next()) {
                var costCenter = grec.cost_center.code;
                var allocPercentage = grec.allocation_percentage;
                var tempPOL = polObj;
                tempPOL['QUANTITY'] = (quantity * (allocPercentage / 100)).toFixed(3);
                tempPOL['temp_costcenter'] = isNaN(costCenter.toString())? costCenter.toString() : this.checkPadding(costCenter.toString(),10);
                polines.push(JSON.parse(JSON.stringify(tempPOL)));
            }
        } else {
            polines.push(polObj);
        }
        return polines;
    },
    checkPadding: function(stringInteger, stringlength) {
        var fieldValue = stringInteger.toString();
        while (fieldValue.length < stringlength)
            fieldValue = "0" + fieldValue;
        return fieldValue;
    },

    divideGRLinesBasedOnCostCenter: function(GrRec, GrObj) {
        var GrLines = [];
        var PolSysid = GrRec.purchase_order_line;
        var dividedQuantities = this.calculateQuantityBasedOnCostCenters(PolSysid, GrObj['ENTRY_QNT']);
        var PoItemNums = GrObj['PO_ITEM'].split(',');
        if (PoItemNums.length == dividedQuantities.length) {
            for (var i = 0; i < dividedQuantities.length; i++) {
                var tempGRLine = JSON.parse(JSON.stringify(GrObj));
                tempGRLine['PO_ITEM'] = PoItemNums[i];
                tempGRLine['ENTRY_QNT'] = dividedQuantities[i].QUANTITY;
                GrLines.push(tempGRLine);
            }
            return GrLines;
        }
    },
    calculateQuantityBasedOnCostCenters: function(orderLine_sysid, totalQuantity) {
        var returnArray = [];
        var grec = new GlideRecord('sn_shop_cost_allocation');
        grec.addQuery('order_line.sys_id', orderLine_sysid.toString());
        grec.orderBy('sys_created_on');
        grec.query();
        while (grec.next()) {
            var tempObj = {};
            tempObj['costCenter'] = grec.cost_center.code;
            var allocPercentage = grec.allocation_percentage;
            tempObj['QUANTITY'] = (totalQuantity * (allocPercentage / 100)).toFixed(3);
            returnArray.push(tempObj);
        }
        return returnArray;
    },
    getPlantID: function(grec) {
        var plantId;
        var DeliveryLoc = grec.request_line.location;
        if (DeliveryLoc.office) {
            var ERPmapRec = new GlideRecord('sn_sap_data_int_erp_plant_address_mapping');
            ERPmapRec.addQuery('location.sys_id', DeliveryLoc.office.sys_id.toString());
            ERPmapRec.query();
            if (ERPmapRec.hasNext()) {
                ERPmapRec.next();
                plantId = ERPmapRec.erp_location_id;
            } else {
                throw new Error("No ERP Plant Address Mapping record found for office location");
            }
        } else {
            var ricipientLE = grec.purchase_order.legal_entity;
            if (ricipientLE) {
                var ERPmapRec = new GlideRecord('sn_sap_data_int_erp_plant_address_mapping');
                ERPmapRec.addQuery('legal_entity.sys_id', ricipientLE.sys_id.toString());
                ERPmapRec.addQuery('default_address', 'true');
                ERPmapRec.query();
                if (ERPmapRec.hasNext()) {
                    ERPmapRec.next();
                    plantId = ERPmapRec.erp_location_id;
                } else {
                    var ERPmapRecord = new GlideRecord('sn_sap_data_int_erp_plant_address_mapping');
                    ERPmapRecord.addQuery('legal_entity.sys_id', ricipientLE.sys_id.toString());
                    ERPmapRecord.query();
                    if (ERPmapRecord.hasNext()) {
                        ERPmapRecord.next();
                        plantId = ERPmapRecord.erp_location_id;
                    } else {
                        throw new Error("No ERP Plant Address Mapping record found for selected legal entity");
                    }
                }
            } else {
                throw new Error("No Legal Entity is Selected in Purchase Order");
            }
        }
        return plantId.toString();
    },
	createPOAccountsBasedOnAssets: function(PolRec, PoAccountObj){
    var POAccounts = [];
    var assetRecord = new GlideRecord('alm_asset');
    assetRecord.addQuery('purchase_order_line',PolRec.sys_id);
    assetRecord.query();
    while(assetRecord.next()){
        var temp = PoAccountObj;
        temp['ASSET_NO'] = assetRecord.asset_tag; 
        POAccounts.push(temp);
    }
    return POAccounts;
},
	generatePOServiceEntries : function(POItemNum, packageNum, POServiceObj){
    var POServices = [];
    var serviceAccessObj = {};
    var line1 = {};
    line1['PCKG_NO'] = packageNum;
    line1['LINE_NO'] = "0000000001";
    line1['OUTL_IND'] = 'X';
    line1['SUBPCKG_NO'] = "0000000003";
    POServices.push(line1);

    POServiceObj['PCKG_NO'] = line1['SUBPCKG_NO'];
    POServiceObj['LINE_NO'] = "000000000"+(parseInt(line1['LINE_NO'])+1).toString();
    POServiceObj['EXT_LINE'] = POItemNum;
    POServices.push(POServiceObj);
		gs.info("satya : "+JSON.stringify(POServices));

    serviceAccessObj['PO_ITEM'] = POItemNum;
    serviceAccessObj['SERIAL_NO'] = "0000000001";
    serviceAccessObj['PCKG_NO'] = POServiceObj['PCKG_NO'];
    serviceAccessObj['LINE_NO'] = POServiceObj['LINE_NO'];
		
		gs.info("satyaAc : "+JSON.stringify(serviceAccessObj));

    return {
        POservicesObjs : POServices,
        POServiceAccess : serviceAccessObj
    };
},
	generateECCPOEntities: function(polRec,POlineNum,packageNum){
        var returnObj={};
            //Creating PO Accounts object
        var accountResult = sn_fd.FlowAPI.executeAction('sn_psm_sap_int.generate_ecc_po_accounts_object', {po_accounts:polRec});
        if(!accountResult['__action_status__']['code']){
          accountResult['po_accounts']['PO_ITEM'] = POlineNum;
			if(polRec.acc_assgn_category == 'A'){
				returnObj['accountObj']=this.createPOAccountsBasedOnAssets(accountResult['po_accounts']);
			}else{
				returnObj['accountObj']=accountResult['po_accounts'];
			}
        }else{
            gs.error("Generate ECC PO accounts object- " + accountResult['__action_status__']['message']);
            throw new Error(accountResult['__action_status__']['message']);
        }
        //Creating PO DeliveryAddress object based on delivery location (plant address logic)
        if(!(polRec.request_line.location.office)){
        var addressResult = sn_fd.FlowAPI.executeAction('sn_psm_sap_int.generate_ecc_po_address_object', {po_address:polRec});
        if(!addressResult['__action_status__']['code']){
          addressResult['po_address']['PO_ITEM'] = POlineNum;
            returnObj['addressObj']=addressResult['po_address'];
        }else{
            gs.error("Generate ECC PO address object- " + addressResult['__action_status__']['message']);
            throw new Error(addressResult['__action_status__']['message']);
        }
        }
        //Creating PO schedule   
        var scheduleResult = sn_fd.FlowAPI.executeAction('sn_psm_sap_int.generate_ecc_po_schedule_object', {po_schedule:polRec});
        if(!scheduleResult['__action_status__']['code']){
            scheduleResult['po_schedule']['PO_ITEM'] = POlineNum;
            returnObj['scheduleObj']=scheduleResult['po_schedule'];
        }else{
            gs.error("Generate ECC PO schedule object- " + scheduleResult['__action_status__']['message']);
            throw new Error(scheduleResult['__action_status__']['message']);
        }  
        //Creating PO Limits
       if(polRec.purchase_order.purchase_order_type == 'blanket'){
        var limitResult = sn_fd.FlowAPI.executeAction('sn_psm_sap_int.generate_ecc_po_limits_object', {po_limits:polRec});
        if(!limitResult['__action_status__']['code']){
            returnObj['limitsObj']=limitResult['po_limits'];
        }else{
            gs.error("Generate ECC PO limits object- " + limitResult['__action_status__']['message']);
            throw new Error(limitResult['__action_status__']['message']);
        }
       }
        //Creating PO Services
       if(polRec.product_type == 'service'){
        var serviceResult = sn_fd.FlowAPI.executeAction('sn_psm_sap_int.generate_ecc_po_services_object', {po_services:polRec});
        if(!serviceResult['__action_status__']['code']){
			var serviceEntries = this.generatePOServiceEntries(POlineNum,packageNum,serviceResult['po_services']);
			gs.info("Gen1Service Result :"+JSON.stringify(serviceEntries));
            returnObj['servicesObj']=serviceEntries['POservicesObjs'];
			returnObj['accessServicesObj']=serviceEntries['POServiceAccess'];
			gs.info('Gen1Service Return Obj :'+JSON.stringify(returnObj));
        }else{
            gs.error("Generate ECC PO services object- Error : " + serviceResult['__action_status__']['message']);
            throw new Error(serviceResult['__action_status__']['message']);
        }
       }
        return returnObj;
        },

    type: 'PsmSapUtils'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>satya</sys_created_by>
        <sys_created_on>2022-11-22 05:29:59</sys_created_on>
        <sys_id>53fb76f5879fd9502a18b846dabb35d9</sys_id>
        <sys_mod_count>68</sys_mod_count>
        <sys_name>PsmSapUtils</sys_name>
        <sys_package display_value="Procurement Service Management Integration with SAP" source="sn_psm_sap_int">1cc68aba8796d1102a18b846dabb3551</sys_package>
        <sys_policy/>
        <sys_scope display_value="Procurement Service Management Integration with SAP">1cc68aba8796d1102a18b846dabb3551</sys_scope>
        <sys_update_name>sys_script_include_53fb76f5879fd9502a18b846dabb35d9</sys_update_name>
        <sys_updated_by>satya</sys_updated_by>
        <sys_updated_on>2023-03-03 11:34:40</sys_updated_on>
    </sys_script_include>
</record_update>
